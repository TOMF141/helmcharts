# Default values for overseerr.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Override the name of the chart.
nameOverride: ""
# -- Override the full name of the chart.
fullnameOverride: ""

# -- Number of replicas for the deployment.
replicaCount: 1

image:
  # -- Container image repository.
  repository: lscr.io/linuxserver/overseerr
  # -- Container image pull policy.
  pullPolicy: Always
  # -- Container image tag. Defaults to .Chart.AppVersion.
  tag: "latest" # Pinned to latest, consider using Chart.AppVersion or specific version

# -- Optional list of image pull secrets.
imagePullSecrets: []
# -- Optional extra labels to add to all resources.
extraLabels: {}

# -- Deployment strategy.
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: "25%"
    maxUnavailable: "25%"

serviceAccount:
  # -- Specifies whether a service account should be created.
  create: true
  # -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  name: ""
  # -- Annotations to add to the service account.
  annotations: {}

# -- Annotations to add to the pod.
podAnnotations: {}
# -- Labels to add to the pod.
podLabels: {}
# -- Annotations to add to the deployment.
deploymentAnnotations: {}

# -- Security context for the pod.
# See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext:
  fsGroup: 1000 # Example, adjust if needed
  # runAsUser: 1000
  # runAsGroup: 1000
  # runAsNonRoot: true

  # -- Security context for the container.
  # See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext:
  allowPrivilegeEscalation: false
  # capabilities:
  #   drop:
  #     - ALL
  # readOnlyRootFilesystem: true
  runAsUser: 1000 # Example, adjust if needed
  runAsGroup: 1000 # Example, adjust if needed
  runAsNonRoot: true # Example, adjust if needed

service:
  # -- Kubernetes service type.
  type: ClusterIP
  # -- Service port.
  port: 5055
  # -- Service target port. Defaults to the service port.
  targetPort: 5055 # Explicitly set targetPort
  # -- Service port name.
  name: http # Standard name for probes etc.
  # -- Node port (only used if type is NodePort).
  nodePort: null
  # -- Annotations for the service.
  annotations: {}
  # -- Labels for the service.
  labels: {}

ingress:
  # -- Enable ingress controller resource.
  enabled: false
  # -- Ingress class name.
  className: ""
  # -- Annotations for the ingress.
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
  # -- Ingress host configuration.
  hosts:
  - host: overseerr.local # Placeholder: Adjust host
    paths:
    - path: /
      pathType: ImplementationSpecific
  # -- Ingress TLS configuration.
  tls: []
  #  - secretName: overseerr-tls
  #    hosts:
  #      - overseerr.local

  # -- Resource requests and limits.
  # See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources:
  limits:
    memory: 512Mi
  requests:
    cpu: 500m
    memory: 258Mi

# -- Liveness probe configuration.
# See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  enabled: true
  type: httpGet # Changed from exec to standard httpGet
  path: /api/v1/status # Use Overseerr's status endpoint
  port: http # References service.port name
  initialDelaySeconds: 30
  periodSeconds: 60 # Kept original period
  timeoutSeconds: 5
  failureThreshold: 3

# -- Readiness probe configuration.
# See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  enabled: true
  type: httpGet
  path: /api/v1/status # Use Overseerr's status endpoint
  port: http # References service.port name
  initialDelaySeconds: 15
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 3

# -- Persistence configuration. Defines volumes and mounts.
# See https://kubernetes.io/docs/concepts/storage/persistent-volumes/
persistence:
  config:
    # -- Enable persistence for the main /config volume.
    enabled: true
    # -- Type of volume. Options: pvc, iscsi, hostPath, emptyDir, nfs.
    # Set to 'iscsi' to use iSCSI, otherwise 'pvc' is common.
    type: pvc
    # -- Mount path inside the container.
    mountPath: /config
    # -- SubPath within the volume to mount.
    # subPath: ""
    # -- Mount read-only.
    # readOnly: false

    # --- PVC specific settings (used if type is pvc) ---
    # -- Access modes for the PVC.
    accessModes:
    - ReadWriteOnce
    # -- Size of the PVC.
    size: 1Gi
    # -- Storage class for the PVC. If "", uses default.
    storageClass: ""
    # -- Use an existing PVC instead of creating one.
    existingClaim: ""

    # --- iSCSI specific settings (used if type is iscsi) ---
    # -- iSCSI Target Portal (e.g., 1.2.3.4:3260).
    targetPortal: ""
    # -- Optional list of iSCSI target portals.
    # portals: []
    # -- iSCSI Target IQN.
    iqn: ""
    # -- iSCSI Target Lun number.
    lun: 0
    # -- Filesystem type for iSCSI volume.
    fsType: "ext4"
    # -- Mount iSCSI volume read-only.
    readOnly: false
    # -- Name of secret for CHAP authentication.
    # secretRef: ""

    # --- hostPath specific settings (used if type is hostPath) ---
    # path: /path/on/host
    # hostPathType: DirectoryOrCreate

    # --- emptyDir specific settings (used if type is emptyDir) ---
    # medium: "" # Memory or ""
    # sizeLimit: ""

  backup:
    # -- Enable persistence for an optional backup volume (e.g., using NFS).
    enabled: false
    # -- Type of volume. Typically 'nfs' for backups.
    type: nfs
    # -- Mount path inside the container.
    mountPath: /backup # Example mount path
    # -- SubPath within the volume to mount.
    # subPath: ""
    # -- Mount read-only.
    # readOnly: false

    # --- NFS specific settings (used if type is nfs) ---
    # -- NFS server hostname or IP.
    server: ""
    # -- Path on the NFS server.
    path: ""

# -- Node selector configuration.
# See https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeSelector: {}

# -- Tolerations configuration.
# See https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# -- Affinity configuration.
# See https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# -- Environment variables passed directly to the container.
# See https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
env:
  TZ: Europe/London
  PUID: "1000" # Example, adjust if needed
  PGID: "1000" # Example, adjust if needed
  UMASK: "002" # Example, adjust if needed

# -- Environment variables sourced from ConfigMaps or Secrets.
# See https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
envFrom: []
# - secretRef:
#     name: my-secret
# - configMapRef:
#     name: my-configmap

# -- Application specific configuration (non-sensitive).
# Placeholder: Structure this section based on how the application is configured (env vars, config file).
appConfig: {}

# -- Application specific configuration (sensitive).
# Placeholder: Structure this section for sensitive values (API keys, passwords).
secretConfig: {}

# -- Pod hostname override.
# See https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-hostname-and-subdomain-fields
hostname: overseerr # Kept from original values
