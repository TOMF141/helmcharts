apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: overseerr
  {{- if or .Values.deployment.deploymentAnnotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" (dict "values" (list .Values.deployment.deploymentAnnotations .Values.commonAnnotations) "context" .) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.deployment.autoscaling.hpa.enabled }}
  replicas: {{ .Values.deployment.replicaCount }}
  {{- end }}
  {{- if .Values.deployment.updateStrategy }}
  strategy: {{- toYaml .Values.deployment.updateStrategy | nindent 4 }}
  {{- end }}
  {{- $podLabels := include "common.tplvalues.merge" (dict "values" (list .Values.deployment.podLabels .Values.commonLabels) "context" .) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/component: overseerr
  template:
    metadata:
      {{- if .Values.deployment.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.deployment.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: overseerr
    spec:
      {{- include "overseerr.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ template "overseerr.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.deployment.automountServiceAccountToken }}
      {{- if .Values.deployment.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.deployment.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.deployment.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.deployment.podAffinityPreset "component" "overseerr" "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.deployment.podAntiAffinityPreset "component" "overseerr" "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.deployment.nodeAffinityPreset.type "key" .Values.deployment.nodeAffinityPreset.key "values" .Values.deployment.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.deployment.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.deployment.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.deployment.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.priorityClassName }}
      priorityClassName: {{ .Values.deployment.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.deployment.schedulerName }}
      schedulerName: {{ .Values.deployment.schedulerName | quote }}
      {{- end }}
      {{- if .Values.deployment.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.deployment.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.deployment.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.deployment.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
        - name: volume-permissions
          image: {{ include "overseerr.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -ec
            - |
              chown -R {{ .Values.deployment.containerSecurityContext.runAsUser }}:{{ .Values.deployment.podSecurityContext.fsGroup }} {{ .Values.persistence.mountPath }}
          {{- if .Values.volumePermissions.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.volumePermissions.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- else if ne .Values.volumePermissions.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.volumePermissions.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              # subPath is only applicable for PVC type and handled in values.yaml now
        {{- end }}
        {{- if .Values.deployment.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.deployment.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: overseerr
          image: {{ template "overseerr.image" . }}
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          {{- if .Values.deployment.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.deployment.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.deployment.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.deployment.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.deployment.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.deployment.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.deployment.image.debug .Values.diagnosticMode.enabled) | quote }}
            {{- if .Values.deployment.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.deployment.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.deployment.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.deployment.extraEnvVarsCM | quote }}
            {{- end }}
            {{- if .Values.deployment.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.deployment.extraEnvVarsSecret | quote }}
            {{- end }}
          {{- if .Values.deployment.resources }}
          resources: {{- toYaml .Values.deployment.resources | nindent 12 }}
          {{- else if ne .Values.deployment.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.deployment.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.deployment.containerPorts.http }}
            {{- if .Values.deployment.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.deployment.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.deployment.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.deployment.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.deployment.livenessProbe.enabled }}
          livenessProbe:
            {{- $probe := .Values.deployment.livenessProbe }}
            {{- if $probe.httpGet }}
            httpGet: {{- include "common.tplvalues.render" (dict "value" $probe.httpGet "context" $) | nindent 14 }}
            {{- else }}
            httpGet:
              path: /api/v1/status # Default probe path
              port: http
            {{- end }}
            {{- include "common.tplvalues.render" (dict "value" (omit $probe "enabled" "httpGet") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.deployment.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.deployment.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.deployment.readinessProbe.enabled }}
          readinessProbe:
            {{- $probe := .Values.deployment.readinessProbe }}
            {{- if $probe.httpGet }}
            httpGet: {{- include "common.tplvalues.render" (dict "value" $probe.httpGet "context" $) | nindent 14 }}
            {{- else }}
            httpGet:
              path: /api/v1/status # Default probe path
              port: http
            {{- end }}
            {{- include "common.tplvalues.render" (dict "value" (omit $probe "enabled" "httpGet") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.deployment.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.deployment.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.deployment.startupProbe.enabled }}
          startupProbe:
            {{- $probe := .Values.deployment.startupProbe }}
            {{- if $probe.httpGet }}
            httpGet: {{- include "common.tplvalues.render" (dict "value" $probe.httpGet "context" $) | nindent 14 }}
            {{- else }}
            httpGet:
              path: /api/v1/status # Default probe path
              port: http
            {{- end }}
            {{- include "common.tplvalues.render" (dict "value" (omit $probe "enabled" "httpGet") "context" $) | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.deployment.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.deployment.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              # subPath is only applicable for PVC type and handled in values.yaml now
          {{- if .Values.deployment.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.deployment.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.deployment.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.deployment.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
            {{- if eq .Values.persistence.type "pvc" }}
          persistentVolumeClaim:
            claimName: {{ default (printf "%s" (include "common.names.fullname" .)) .Values.persistence.pvc.existingClaim | quote }}
            {{- else if eq .Values.persistence.type "nfs" }}
          nfs:
            server: {{ required "NFS server is required" .Values.persistence.nfs.server | quote }}
            path: {{ required "NFS path is required" .Values.persistence.nfs.path | quote }}
            readOnly: {{ .Values.persistence.nfs.readOnly }}
            {{- else if eq .Values.persistence.type "iscsi" }}
          iscsi:
            targetPortal: {{ required "iSCSI targetPortal is required" .Values.persistence.iscsi.targetPortal | quote }}
            iqn: {{ required "iSCSI iqn is required" .Values.persistence.iscsi.iqn | quote }}
            lun: {{ .Values.persistence.iscsi.lun }}
            fsType: {{ .Values.persistence.iscsi.fsType | quote }}
            readOnly: {{ .Values.persistence.iscsi.readOnly }}
            {{- if .Values.persistence.iscsi.secretRef }}
            secretRef: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.iscsi.secretRef "context" $) | nindent 14 }}
            {{- end }}
            {{- else }}
          emptyDir: {} # Default to emptyDir if type is unknown or not set when enabled
            {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if .Values.deployment.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.deployment.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
