# Default values for autopulse.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/dan-online/autopulse
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
# -- Optional extra labels to add to all resources.
extraLabels: {}
nameOverride: ""
fullnameOverride: ""

# -- Deployment strategy.
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: "25%"
    maxUnavailable: "25%"

serviceAccount:
  # -- Specifies whether a service account should be created.
  create: true
  # -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  name: ""
  # -- Annotations to add to the service account.
  annotations: {}

# -- Annotations to add to the pod.
podAnnotations: {}
# -- Labels to add to the pod.
podLabels: {}
# -- Annotations to add to the deployment.
deploymentAnnotations: {}

# -- Security context for the pod.
# See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext: {}
  # fsGroup: 1000
  # runAsUser: 1000
  # runAsGroup: 1000
  # runAsNonRoot: true

# -- Security context for the container.
# See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext: {}
  # allowPrivilegeEscalation: false
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Kubernetes service type.
  type: ClusterIP
  # -- Service port.
  port: 2875
  # -- Service target port. Defaults to the service port.
  targetPort: 2875 # Assuming targetPort is same as port for autopulse
  # -- Node port (only used if type is NodePort).
  nodePort: null
  # -- Annotations for the service.
  annotations: {}
  # -- Labels for the service.
  labels: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Liveness probe configuration.
# See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  enabled: true
  type: httpGet # Options: httpGet, tcpSocket, exec. Placeholder: Adjust type/path/port.
  path: / # Placeholder: Adjust path. Needs verification for autopulse
  port: http # References service.port name (port 2875)
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  # For exec type:
  # command:
  #   - cat
  #   - /tmp/healthy

  # -- Readiness probe configuration.
  # See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  enabled: true
  type: httpGet # Options: httpGet, tcpSocket, exec. Placeholder: Adjust type/path/port.
  path: / # Placeholder: Adjust path. Needs verification for autopulse
  port: http # References service.port name (port 2875)
  initialDelaySeconds: 15
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 3
  # For exec type:
  # command:
  #   - cat
  #   - /tmp/ready

  # -- Persistence configuration. Defines volumes and mounts.
  # See https://kubernetes.io/docs/concepts/storage/persistent-volumes/
  # Placeholder: Adjust persistence keys (e.g., 'config', 'data') and settings as needed.
persistence: {}
  # Example:
  # data:
  #   enabled: true
  #   type: pvc
  #   mountPath: /data
  #   accessModes:
  #   - ReadWriteOnce
  #   size: 10Gi
  #   storageClass: ""
  #   existingClaim: ""

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Configuration Secret handling
config:
  # Set to true to use an existing secret instead of creating one
  existingSecret: false
  # The name of the secret to use or create
  secretName: "" # If empty and existingSecret is false, a name is generated
  # The key within the secret that holds the config.yaml content
  secretKey: config.yaml
  # The content of config.yaml (only used if existingSecret is false).
  # IMPORTANT: It is strongly recommended to provide the actual config.yaml content
  # using --set-file config.data=/path/to/your/config.yaml during helm install/upgrade
  # instead of embedding it directly here, especially if it contains sensitive data.
  data: |
    # Placeholder based on the example config.yaml structure.
    # Customize this section or provide the full configuration via --set-file.

    # app:
      # hostname: 0.0.0.0 # Usually not needed in Kubernetes
      # port: 2875 # Handled by the Service definition
      # database_url: # Automatically set in the deployment based on postgresql/externalDatabase values

    # auth:
      # username: admin
      # password: password # Store sensitive data securely!

    # opts:
      # check_path: true
      # max_retries: 5

    # triggers:
      # sonarr:
      #   type: sonarr
      #   rewrite:
      #     from: /orig/tv
      #     to: /new/tv

    # webhooks:
      # discord:
      #   type: "discord"
      #   url: "YOUR_DISCORD_WEBHOOK_URL" # Store sensitive data securely!

    # targets:
      # plex:
      #   type: plex
      #   url: http://plex.your-namespace.svc.cluster.local:32400 # Example internal service URL
      #   token: YOUR_PLEX_TOKEN # Store sensitive data securely!
      # jellyfin:
      #   type: jellyfin
      #   url: http://jellyfin.your-namespace.svc.cluster.local:8096 # Example internal service URL
      #   token: YOUR_JELLYFIN_TOKEN # Store sensitive data securely!

# External database configuration (Required)
externalDatabase:
  # Choose ONE of the following methods for providing connection details:

  # Method 1: Provide all details directly in values.yaml (least secure for password)
  # host: ""
  # port: 5432
  # username: ""
  # database: ""
  # password: "" # Avoid storing plain passwords here

  # Method 2: Provide details in values.yaml, but password from an existing secret
  host: "" # Required if using Method 2
  port: 5432 # Required if using Method 2
  username: "" # Required if using Method 2
  database: "" # Required if using Method 2
  existingPasswordSecret: "" # Required if using Method 2. Name of the secret containing the password.
  passwordSecretKey: "" # Required if using Method 2. Key in the secret for the password.
  # Method 3: Provide the full database connection URL from an existing secret
  # existingConnectionStringSecret: "" # Name of the secret containing the full DATABASE_URL
  # connectionStringSecretKey: "database-url" # Key in the secret for the full DATABASE_URL

  # Method 4: Provide individual connection components from an existing secret
  # existingConnectionDetailsSecret: "" # Name of the secret containing connection components
  # hostSecretKey: "db_host"
  # portSecretKey: "db_port"
  # usernameSecretKey: "db_user"
  # passwordSecretKey: "db_password" # Reuses the key name from Method 2 for consistency
  # databaseSecretKey: "db_name"

  # Environment variables for the autopulse container
  # -- Environment variables passed directly to the container.
  # See https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  # Placeholder: Add common env vars like TZ, PUID, PGID if applicable.
env: {}
  # TZ: Europe/London
  # PUID: 1000
  # PGID: 1000
  # UMASK: "002"
  # TZ: Europe/London

# -- Environment variables sourced from ConfigMaps or Secrets.
# See https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
envFrom: []
# - secretRef:
#     name: my-secret
# - configMapRef:
#     name: my-configmap

# -- Application specific configuration (non-sensitive).
# Placeholder: Structure this section based on how the application is configured (env vars, config file).
# Autopulse seems to use a single config file managed via the 'config' section below.
appConfig: {}
  # Example for env var based config:
  # SOME_SETTING: "value"
  # ANOTHER_SETTING: true

# -- Application specific configuration (sensitive).
# Placeholder: Structure this section for sensitive values (API keys, passwords).
# Autopulse seems to use a single config file managed via the 'config' section below.
secretConfig: {}
  # Example for env var based config:
  # API_KEY: ""
  # apiKeySecretRef:
  #   name: ""
  #   key: ""

# Optional UI configuration
ui:
  enabled: false
  image:
    repository: danonline/autopulse
    tag: ui
    pullPolicy: IfNotPresent
  replicaCount: 1
  service:
    type: ClusterIP
    port: 2880
  ingress:
    enabled: false
    # ... similar ingress configuration as above ...
  env: {}
    # SECRET: your_secret_here
    # ORIGIN: http://localhost:2880
