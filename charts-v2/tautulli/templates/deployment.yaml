apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: tautulli
  {{- if or .Values.primary.deploymentAnnotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" (dict "values" (list .Values.primary.deploymentAnnotations .Values.commonAnnotations) "context" .) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.primary.autoscaling.hpa.enabled }}
  replicas: {{ .Values.primary.replicaCount }}
  {{- end }}
  {{- if .Values.primary.updateStrategy }}
  strategy: {{- toYaml .Values.primary.updateStrategy | nindent 4 }}
  {{- end }}
  {{- $podLabels := include "common.tplvalues.merge" (dict "values" (list .Values.primary.podLabels .Values.commonLabels) "context" .) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/component: tautulli
  template:
    metadata:
      {{- if .Values.primary.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.primary.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: tautulli
    spec:
      {{- include "tautulli.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ template "tautulli.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.primary.automountServiceAccountToken }}
      {{- if .Values.primary.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.primary.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.primary.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.primary.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.primary.podAffinityPreset "component" "tautulli" "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.primary.podAntiAffinityPreset "component" "tautulli" "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.primary.nodeAffinityPreset.type "key" .Values.primary.nodeAffinityPreset.key "values" .Values.primary.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.primary.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.primary.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.primary.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.primary.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.primary.priorityClassName }}
      priorityClassName: {{ .Values.primary.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.primary.schedulerName }}
      schedulerName: {{ .Values.primary.schedulerName | quote }}
      {{- end }}
      {{- if .Values.primary.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.primary.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.primary.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.primary.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.primary.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.primary.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
        - name: volume-permissions
          image: {{ include "tautulli.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
          {{- if .Values.volumePermissions.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.volumePermissions.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- else if ne .Values.volumePermissions.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.volumePermissions.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              # subPath is only applicable for PVC type and handled in values.yaml now
        {{- end }}
        {{- if .Values.primary.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.primary.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: tautulli
          image: {{ template "tautulli.image" . }}
          imagePullPolicy: {{ .Values.primary.image.pullPolicy }}
          {{- if .Values.primary.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.primary.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.primary.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.primary.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.primary.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.primary.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.primary.image.debug .Values.diagnosticMode.enabled) | quote }}
            {{- if .Values.primary.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.primary.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.primary.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.primary.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.primary.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.primary.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.primary.resources }}
          resources: {{- toYaml .Values.primary.resources | nindent 12 }}
          {{- else if ne .Values.primary.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.primary.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.primary.containerPorts.http }}
            {{- if .Values.primary.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.primary.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.primary.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.primary.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.primary.livenessProbe.enabled }}
          livenessProbe:
            {{- if .Values.primary.livenessProbe.httpGet }}
            httpGet: {{- include "common.tplvalues.render" (dict "value" .Values.primary.livenessProbe.httpGet "context" $) | nindent 14 }}
            {{- end }}
            {{- include "common.tplvalues.render" (dict "value" (omit .Values.primary.livenessProbe "enabled" "httpGet") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.primary.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.primary.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.primary.readinessProbe.enabled }}
          readinessProbe:
            {{- if .Values.primary.readinessProbe.httpGet }}
            httpGet: {{- include "common.tplvalues.render" (dict "value" .Values.primary.readinessProbe.httpGet "context" $) | nindent 14 }}
            {{- end }}
            {{- include "common.tplvalues.render" (dict "value" (omit .Values.primary.readinessProbe "enabled" "httpGet") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.primary.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.primary.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.primary.startupProbe.enabled }}
          startupProbe:
            {{- if .Values.primary.startupProbe.httpGet }}
            httpGet: {{- include "common.tplvalues.render" (dict "value" .Values.primary.startupProbe.httpGet "context" $) | nindent 14 }}
            {{- end }}
            {{- include "common.tplvalues.render" (dict "value" (omit .Values.primary.startupProbe "enabled" "httpGet") "context" $) | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.primary.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.primary.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              # subPath is only applicable for PVC type and handled in values.yaml now
          {{- if .Values.primary.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.primary.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.primary.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.primary.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
            {{- if eq .Values.persistence.type "pvc" }}
          persistentVolumeClaim:
            claimName: {{ default (printf "%s" (include "common.names.fullname" .)) .Values.persistence.pvc.existingClaim }}
            {{- else if eq .Values.persistence.type "nfs" }}
          nfs:
            server: {{ required "NFS server is required" .Values.persistence.nfs.server }}
            path: {{ required "NFS path is required" .Values.persistence.nfs.path }}
            readOnly: {{ .Values.persistence.nfs.readOnly }}
            {{- else if eq .Values.persistence.type "iscsi" }}
          iscsi:
            targetPortal: {{ required "iSCSI targetPortal is required" .Values.persistence.iscsi.targetPortal }}
            iqn: {{ required "iSCSI iqn is required" .Values.persistence.iscsi.iqn }}
            lun: {{ .Values.persistence.iscsi.lun }}
            fsType: {{ .Values.persistence.iscsi.fsType }}
            readOnly: {{ .Values.persistence.iscsi.readOnly }}
            {{- if .Values.persistence.iscsi.secretRef }}
            secretRef: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.iscsi.secretRef "context" $) | nindent 14 }}
            {{- end }}
            {{- else }}
          emptyDir: {} # Default to emptyDir if type is unknown or not set when enabled
            {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if .Values.primary.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.primary.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
