apiVersion: {{ include "huntarr.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "huntarr.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "huntarr.labels" . | nindent 4 }} # Removed trim
    {{- range $key, $value := .Values.extraLabels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- with .Values.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }} # Removed trim
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "huntarr.selectorLabels" . | nindent 6 }} # Removed trim
  # Revert strategy block to use toYaml with nindent
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }} # Removed trim
      {{- end }}
      labels:
        {{- include "huntarr.selectorLabels" . | nindent 8 }} # Removed trim
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }} # Removed trim
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }} # Removed trim
      {{- end }}
      serviceAccountName: {{ include "huntarr.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }} # Removed trim
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }} # Removed trim
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.secretConfig.configSecretName }}
          # If configSecretName is set, source all env vars from that existing secret
          envFrom:
            - secretRef:
                name: {{ .Values.secretConfig.configSecretName }}
          {{- else }}
          # Otherwise, build env vars from appConfig and handle API_KEY separately
          env:
            # Add standard env vars if defined
            {{- range $key, $value := .Values.env }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
            # Handle API_KEY based on secretConfig settings
            - name: API_KEY
            {{- if .Values.secretConfig.secretName }}
              # Source API_KEY from user-provided existing secret
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretConfig.secretName }}
                  key: {{ .Values.secretConfig.secretApiKeyName }}
            {{- else }}
              # Source API_KEY from chart-managed secret (created by secret.yaml)
              valueFrom:
                secretKeyRef:
                  # This name must match the secret created in secret.yaml
                  name: {{ include "huntarr.fullname" . }}
                  key: API_KEY # This key must match the key in secret.yaml
            {{- end }} # End of secretName check
          {{- end }} # End of configSecretName check

          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- if eq .Values.livenessProbe.type "httpGet" }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: http # Matches the port name above
            {{- else if eq .Values.livenessProbe.type "tcpSocket" }}
            tcpSocket:
              port: http # Matches the port name above
            {{- else if eq .Values.livenessProbe.type "exec" }}
            exec:
              command:
                {{- toYaml .Values.livenessProbe.command | nindent 16 }} # Removed trim
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- if eq .Values.readinessProbe.type "httpGet" }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: http # Matches the port name above
            {{- else if eq .Values.readinessProbe.type "tcpSocket" }}
            tcpSocket:
              port: http # Matches the port name above
            {{- else if eq .Values.readinessProbe.type "exec" }}
            exec:
              command:
                {{- toYaml .Values.readinessProbe.command | nindent 16 }} # Removed trim
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }} # Removed trim
          volumeMounts:
            {{- range $key, $value := .Values.persistence }}
            {{- if $value.enabled }}
            - name: {{ $key }}
              mountPath: {{ $value.mountPath }}
              {{- if $value.subPath }}
              subPath: {{ $value.subPath }}
              {{- end }}
              {{- if $value.readOnly }}
              readOnly: {{ $value.readOnly }}
              {{- end }}
            {{- end }}
            {{- end }}
      volumes:
        {{- range $key, $value := .Values.persistence }}
        {{- if $value.enabled }}
        {{- /* Define PVC name variable outside the YAML structure */}}
        {{- $pvcName := "" }}
        {{- if eq $value.type "pvc" }}
          {{- if $value.existingClaim }}
            {{- $pvcName = $value.existingClaim }}
          {{- else }}
            {{- $pvcName = printf "%s-%s" (include "huntarr.fullname" $) $key }}
          {{- end }}
        {{- end }}
        - name: {{ $key }}
          {{- if eq $value.type "pvc" }}
          persistentVolumeClaim:
            claimName: {{ $pvcName }}
          {{- else if eq $value.type "hostPath" }}
          hostPath:
            path: {{ $value.path }}
            type: {{ $value.hostPathType | default "DirectoryOrCreate" }}
          {{- else if eq $value.type "emptyDir" }}
          emptyDir:
          {{- if $value.medium }}
            medium: {{ $value.medium }}
          {{- end }}
          {{- if $value.sizeLimit }}
            sizeLimit: {{ $value.sizeLimit }}
          {{- end }}
          {{- else if eq $value.type "nfs" }}
          nfs:
            server: {{ $value.server }}
            path: {{ $value.path }}
            readOnly: {{ $value.readOnly | default false }}
          {{- else if eq $value.type "iscsi" }}
          iscsi:
            targetPortal: {{ $value.targetPortal }}
            iqn: {{ $value.iqn }}
            lun: {{ $value.lun }}
            fsType: {{ $value.fsType | default "ext4" }}
            readOnly: {{ $value.readOnly | default false }}
            {{- if $value.secretRef }}
            secretRef:
              name: {{ $value.secretRef }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }} # Removed trim
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }} # Removed trim
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }} # Removed trim
      {{- end }}
