apiVersion: {{ include "lidarr.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "lidarr.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "lidarr.labels" . | nindent 4 }}
    {{- range $key, $value := .Values.extraLabels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- with .Values.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "lidarr.selectorLabels" . | nindent 6 }}
  strategy:
    type: {{ .Values.strategy.type }}
    {{- if eq .Values.strategy.type "RollingUpdate" }}
    rollingUpdate:
      {{- toYaml .Values.strategy.rollingUpdate | nindent 6 }}
    {{- end }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "lidarr.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "lidarr.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.hostname }}
      hostname: {{ .Values.hostname | quote }}
      {{- end }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
      {{- if .Values.cloudnativepg.enabled }}
      initContainers:
        - name: config-init
          image: {{ .Values.cloudnativepg.initContainer.image }}
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          resources:
            {{- toYaml .Values.cloudnativepg.initContainer.resources | nindent 12 }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              set -e
              
              # Determine the CloudnativePG secret name
              CNPG_SECRET_NAME="{{ .Values.cloudnativepg.secretName }}"
              if [ -z "$CNPG_SECRET_NAME" ]; then
                CNPG_SECRET_NAME="{{ .Values.cloudnativepg.clusterName }}-app"
              fi
              
              # Get CloudnativePG credentials from secret
              CNPG_NAMESPACE="{{ .Values.cloudnativepg.namespace | default .Release.Namespace }}"
              echo "Fetching CloudnativePG credentials from secret $CNPG_SECRET_NAME in namespace $CNPG_NAMESPACE"
              
              # Extract database connection details
              PG_HOST=$(kubectl get secret -n $CNPG_NAMESPACE $CNPG_SECRET_NAME -o jsonpath='{.data.host}' | base64 -d)
              PG_PORT=$(kubectl get secret -n $CNPG_NAMESPACE $CNPG_SECRET_NAME -o jsonpath='{.data.port}' | base64 -d)
              PG_USER=$(kubectl get secret -n $CNPG_NAMESPACE $CNPG_SECRET_NAME -o jsonpath='{.data.user}' | base64 -d)
              PG_PASSWORD=$(kubectl get secret -n $CNPG_NAMESPACE $CNPG_SECRET_NAME -o jsonpath='{.data.password}' | base64 -d)
              
              # Get API key from secret or values
              {{- if .Values.secretConfig.apiKeySecretRef }}
              API_KEY_SECRET_NAME="{{ .Values.secretConfig.apiKeySecretRef.name }}"
              API_KEY_SECRET_KEY="{{ .Values.secretConfig.apiKeySecretRef.key }}"
              if [ -n "$API_KEY_SECRET_NAME" ] && [ -n "$API_KEY_SECRET_KEY" ]; then
                echo "Fetching API key from secret $API_KEY_SECRET_NAME in namespace {{ .Release.Namespace }}"
                API_KEY=$(kubectl get secret -n {{ .Release.Namespace }} $API_KEY_SECRET_NAME -o jsonpath="{.data.$API_KEY_SECRET_KEY}" | base64 -d)
                if [ -z "$API_KEY" ]; then
                  echo "Error: API key not found in secret $API_KEY_SECRET_NAME with key $API_KEY_SECRET_KEY"
                  exit 1
                fi
              else
                echo "Error: API key secret reference is incomplete. Both name and key must be provided"
                exit 1
              fi
              {{- else if .Values.secretConfig.apiKey }}
              API_KEY="{{ .Values.secretConfig.apiKey }}"
              {{- else }}
              echo "Error: API key is required. Please provide it either in values.yaml (secretConfig.apiKey) or as a secret reference (secretConfig.apiKeySecretRef)"
              exit 1
              {{- end }}
              
              # Define config file paths
              CONFIG_DIR="/config"
              CONFIG_FILE="/shared/config.xml"
              TEMP_CONFIG="/config-init/temp-config.xml"
              
              # Always create a new config.xml with default values and PostgreSQL settings
              echo "Creating new config.xml with current values"
              cat > "$TEMP_CONFIG" << EOF
              <Config>
                <BindAddress>{{ .Values.secretConfig.bindAddress }}</BindAddress>
                <Port>{{ .Values.secretConfig.port }}</Port>
                <SslPort>{{ .Values.secretConfig.sslPort }}</SslPort>
                <EnableSsl>{{ .Values.secretConfig.enableSsl }}</EnableSsl>
                <LaunchBrowser>{{ .Values.secretConfig.launchBrowser }}</LaunchBrowser>
                <ApiKey>$API_KEY</ApiKey>
                <AuthenticationMethod>{{ .Values.secretConfig.authenticationMethod }}</AuthenticationMethod>
                <AuthenticationRequired>{{ .Values.secretConfig.authenticationRequired }}</AuthenticationRequired>
                <Branch>{{ .Values.secretConfig.branch }}</Branch>
                <LogLevel>{{ .Values.secretConfig.logLevel }}</LogLevel>
                <SslCertPath>{{ .Values.secretConfig.sslCertPath }}</SslCertPath>
                <SslCertPassword>{{ .Values.secretConfig.sslCertPassword }}</SslCertPassword>
                <UrlBase>{{ .Values.secretConfig.urlBase }}</UrlBase>
                <InstanceName>{{ .Values.secretConfig.instanceName }}</InstanceName>
                <UpdateMechanism>{{ .Values.secretConfig.updateMechanism }}</UpdateMechanism>
                <PostgresUser>$PG_USER</PostgresUser>
                <PostgresPassword>$PG_PASSWORD</PostgresPassword>
                <PostgresHost>$PG_HOST</PostgresHost>
                <PostgresPort>$PG_PORT</PostgresPort>
                <PostgresMainDb>{{ .Values.cloudnativepg.mainDb }}</PostgresMainDb>
                <PostgresLogDb>{{ .Values.cloudnativepg.logDb }}</PostgresLogDb>
              </Config>
              EOF
              
              # If additional config secret is provided, merge it
              if [ -n "{{ .Values.additionalConfig.secretRef.name }}" ] && [ -n "{{ .Values.additionalConfig.secretRef.key }}" ]; then
                echo "Merging additional configuration from secret {{ .Values.additionalConfig.secretRef.name }}"
                ADDITIONAL_CONFIG=$(kubectl get secret -n {{ .Release.Namespace }} {{ .Values.additionalConfig.secretRef.name }} -o jsonpath="{.data.{{ .Values.additionalConfig.secretRef.key }}}" | base64 -d)
                
                # Create a temporary file with the additional config
                echo "$ADDITIONAL_CONFIG" > /config-init/additional_config.xml
                
                # Use xmlstarlet or similar tool to merge configs if available
                # For now, just echo a message
                echo "Additional configuration will be applied"
              fi
              
              # Copy the updated config to the shared volume
              cp "$TEMP_CONFIG" "$CONFIG_FILE"
              chmod 644 "$CONFIG_FILE"
              
              echo "Config file created successfully in shared volume"
          volumeMounts:
            - name: config-init-volume
              mountPath: /config-init
            - name: config
              mountPath: /config
              {{- if .Values.persistence.config.subPath }}
              subPath: {{ .Values.persistence.config.subPath }}
              {{- end }}
            - name: shared-config
              mountPath: /shared
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http # Matches service port name
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- with .Values.env }}
          env:
            {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          {{- with .Values.envFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- if eq .Values.livenessProbe.type "httpGet" }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.livenessProbe.port }}
            {{- else if eq .Values.livenessProbe.type "tcpSocket" }}
            tcpSocket:
              port: {{ .Values.livenessProbe.port }}
            {{- else if eq .Values.livenessProbe.type "exec" }}
            exec:
              command: {{ toYaml .Values.livenessProbe.command | nindent 16 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            {{- if .Values.livenessProbe.successThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            {{- end }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- if eq .Values.readinessProbe.type "httpGet" }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.readinessProbe.port }}
            {{- else if eq .Values.readinessProbe.type "tcpSocket" }}
            tcpSocket:
              port: {{ .Values.readinessProbe.port }}
            {{- else if eq .Values.readinessProbe.type "exec" }}
            exec:
              command: {{ toYaml .Values.readinessProbe.command | nindent 16 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            {{- if .Values.readinessProbe.successThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- /* Mount the config PVC */}}
            {{- range $key, $value := .Values.persistence }}
            {{- if and $value.enabled (eq $key "config") }}
            - name: {{ $key }}
              mountPath: /config
              {{- if $value.subPath }}
              subPath: {{ $value.subPath }}
              {{- end }}
            {{- end }}
            {{- end }}
            - name: shared-config
              mountPath: /config/config.xml
              subPath: config.xml
            {{- /* Mount config.xml from secret into the config volume mount */}}
            {{- if and .Values.secretConfig (not .Values.secretConfig.existingSecretName) (not .Values.cloudnativepg.enabled) }}
            - name: config-xml-chart-secret # Mount to the same volume as the PVC
              mountPath: /config/config.xml.secret
              subPath: config.xml
            {{- end }}
            {{- /* Mount config.xml from shared volume when CloudnativePG is enabled */}}
            {{- if .Values.cloudnativepg.enabled }}
            - name: shared-config
              mountPath: /config/config.xml
              subPath: config.xml
            {{- end }}
            {{- /* Mount config.xml from user-specified existing Secret */}}
            {{- if and .Values.configXmlFromSecret.enabled .Values.configXmlFromSecret.secretName }}
            - name: config-xml-secret-volume
              mountPath: {{ printf "%s/%s" .Values.persistence.config.mountPath .Values.configXmlFromSecret.fileName }}
              subPath: {{ .Values.configXmlFromSecret.secretKey }}
              readOnly: {{ .Values.configXmlFromSecret.readOnly }}
            {{- end }}
            {{- /* Mount other persistence volumes (PVC or NFS) */}}
            {{- range $key, $value := .Values.persistence }}
            {{- if and $value.enabled (ne $key "config") }}
            - name: {{ $key }}
              mountPath: {{ $value.mountPath }}
              {{- if $value.subPath }}
              subPath: {{ $value.subPath }}
              {{- end }}
              {{- if $value.readOnly }}
              readOnly: {{ $value.readOnly }}
              {{- end }}
            {{- end }}
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- tpl (toYaml .) $ | nindent 12 }}
            {{- end }}
      volumes:
        - name: shared-config
          emptyDir: {}
        - name: config-init-volume
          emptyDir: {}
        {{- /* Define persistence volumes (PVC or NFS) */}}
        {{- range $key, $value := .Values.persistence }}
        {{- if $value.enabled }}
        - name: {{ $key }}
          {{- if eq $value.type "pvc" }}
          persistentVolumeClaim:
            claimName: {{ $value.existingClaim | default (printf "%s-%s" (include "lidarr.fullname" $) $key) }}
          {{- else if eq $value.type "hostPath" }}
          hostPath:
            path: {{ $value.path }}
            type: {{ $value.hostPathType | default "DirectoryOrCreate" }}
          {{- else if eq $value.type "emptyDir" }}
          emptyDir:
          {{- if $value.medium }}
            medium: {{ $value.medium }}
          {{- end }}
          {{- if $value.sizeLimit }}
            sizeLimit: {{ $value.sizeLimit }}
          {{- end }}
          {{- else if eq $value.type "nfs" }}
          nfs:
            server: {{ $value.server }}
            path: {{ $value.path }}
            readOnly: {{ $value.readOnly | default false }}
          {{- else if eq $value.type "iscsi" }}
          iscsi:
            targetPortal: {{ $value.targetPortal }}
            iqn: {{ $value.iqn }}
            lun: {{ $value.lun }}
            fsType: {{ $value.fsType | default "ext4" }}
            readOnly: {{ $value.readOnly | default false }}
            {{- if $value.secretRef }}
            secretRef:
              name: {{ $value.secretRef }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- end }}
        {{- /* Define volume for config.xml from user-specified existing Secret */}}
        {{- if and .Values.configXmlFromSecret.enabled .Values.configXmlFromSecret.secretName }}
        - name: config-xml-secret-volume
          secret:
            secretName: {{ .Values.configXmlFromSecret.secretName }}
            items:
              - key: {{ .Values.configXmlFromSecret.secretKey }}
                path: {{ .Values.configXmlFromSecret.secretKey }} # This path is relative to the secret mount, subPath uses this.
        {{- end }}
        {{- /* Define config.xml secret volume only if not using existingSecretName and not using CloudnativePG */}}
        {{- if and .Values.secretConfig (not .Values.secretConfig.existingSecretName) (not .Values.cloudnativepg.enabled) }}
        - name: config-xml-chart-secret # Use the same name as the PVC volume for the mount
          secret:
            {{- if .Values.secretConfig.existingSecretName }}
            secretName: {{ .Values.secretConfig.existingSecretName }}
            {{- else }}
            secretName: {{ printf "%s-config" (include "lidarr.fullname" .) }}
            {{- end }}
            items:
              - key: config.xml # Key defined in secret.yaml or existing secret
                path: config.xml # Path within the secret volume mount
        {{- end }}
        {{- /* Define volumes for CloudnativePG integration */}}
        {{- if .Values.cloudnativepg.enabled }}
        - name: config-init-volume
          emptyDir: {}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
